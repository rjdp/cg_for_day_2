---
# Source: chaosgenius/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: chaosgenius-redis
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.8.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
---
# Source: chaosgenius/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: chaosgenius-db
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.1.22
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "Y2hhb3NnZW5pdXM="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: chaosgenius/charts/postgresql/templates/primary/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chaosgenius-db-init-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.1.22
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  01-init.sql: |
    create database chaosgenius;
    create database chaosgenius_data;
---
# Source: chaosgenius/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chaosgenius-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.8.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    slave-read-only yes
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: chaosgenius/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chaosgenius-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.8.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: chaosgenius/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chaosgenius-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.8.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: chaosgenius/templates/backend-scheduler/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-chaosgenius-scheduler
  namespace: default
  labels:
    helm.sh/chart: chaosgenius-0.1.0
    app.kubernetes.io/name: chaosgenius
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
data:
  API_URL: "/api/v1/"
  CG_DB_DOCKER_MOUNT: "cg_db"
  CHAOSGENIUS_VERSION_POSTFIX: "git"
  CHAOSGENIUS_WEBAPP_URL: "https://app.k8s.chaosgenius.io"
  CONFIG_ROOT: "/data"
  DATABASE_DB: "airbyte"
  DATABASE_HOST: "db"
  DATABASE_PASSWORD: "docker"
  DATABASE_PORT: "5432"
  DATABASE_URL: "jdbc:postgresql://db:5432/airbyte"
  DATABASE_USER: "docker"
  DATA_DOCKER_MOUNT: "airbyte_data"
  DB_DOCKER_MOUNT: "airbyte_db"
  DOCKER_NETWORK: "chaos_genius_default"
  HACK_LOCAL_ROOT_PARENT: "/tmp"
  INTERNAL_API_HOST: "airbyte-server:8001"
  LOCAL_DOCKER_MOUNT: "/tmp/airbyte_local"
  LOCAL_ROOT: "/tmp/airbyte_local"
  LOG_LEVEL: "INFO"
  MAX_SYNC_JOB_ATTEMPTS: "3"
  MAX_SYNC_TIMEOUT_DAYS: "3"
  REACT_APP_DISABLE_TELEMETRY: "false"
  SOURCE_BING_ADS: "false"
  SOURCE_FACEBOOK_ADS: "false"
  SOURCE_GOOGLE_ADS: "false"
  SOURCE_GOOGLE_ANALYTICS: "true"
  SOURCE_GOOGLE_BIG_QUERY: "false"
  SOURCE_GOOGLE_SHEETS: "true"
  SOURCE_MYSQL: "false"
  SOURCE_POSTGRES: "false"
  SOURCE_SHOPIFY: "false"
  SOURCE_SNOWFLAKE: "false"
  SOURCE_STRIPE: "false"
  SUBMITTER_NUM_THREADS: "10"
  TASK_CHECKPOINT_LIMIT: "1000"
  TEMPORAL_HOST: "airbyte-temporal:7233"
  TRACKING_STRATEGY: "segment"
  VERSION: "0.29.12-alpha"
  WEBAPP_URL: "https://app.k8s.chaosgenius.io"
  WORKER_ENVIRONMENT: "docker"
  WORKSPACE_DOCKER_MOUNT: "airbyte_workspace"
  WORKSPACE_ROOT: "/tmp/workspace"
---
# Source: chaosgenius/templates/backend-server/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-chaosgenius-server
  namespace: default
  labels:
    helm.sh/chart: chaosgenius-0.1.0
    app.kubernetes.io/name: chaosgenius
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
data:
  AIRBYTE_ENABLED: "False"
  CACHE_DEFAULT_TIMEOUT: "1"
  CELERY_BROKER_URL: "redis://chaosgenius-redis-master:6379/1"
  CELERY_RESULT_BACKEND: "redis://chaosgenius-redis-master:6379/1"
  CHAOSGENIUS_VERSION_POSTFIX: "stable-k8s"
  DATABASE_URL_CG_DB: "postgresql+psycopg2://postgres:chaosgenius@chaosgenius-db/chaosgenius"
  DATA_DATABASE: "chaosgenius_data"
  DAYS_OFFSET_FOR_ANALTYICS: "2"
  DB_HOST: "chaosgenius-db"
  DB_PASSWORD: "chaosgenius"
  DB_PORT: "5432"
  DB_USERNAME: "postgres"
  DEEPDRILLS_ENABLED_TIME_RANGES: "last_30_days,last_7_days,previous_day,month_on_month,month_to_date,week_on_week,week_to_date"
  DEEPDRILLS_HTABLE_MAX_CHILDREN: "5"
  DEEPDRILLS_HTABLE_MAX_DEPTH: "3"
  DEEPDRILLS_HTABLE_MAX_PARENTS: "5"
  FLASK_APP: "run"
  FLASK_DEBUG: "0"
  FLASK_ENV: "production"
  FLASK_RUN_PORT: "5000"
  INTEGRATION_DATABASE: "chaosgenius_data"
  INTEGRATION_DB_HOST: "chaosgenius-db"
  INTEGRATION_DB_PASSWORD: "chaosgenius"
  INTEGRATION_DB_PORT: "5432"
  INTEGRATION_DB_USERNAME: "postgres"
  INTEGRATION_SERVER: "http://server:8001"
  MAX_ANOMALY_SLACK_DAYS: "14"
  MAX_DEEPDRILLS_SLACK_DAYS: "14"
  MAX_FILTER_SUBGROUPS_ANOMALY: "250"
  MAX_ROWS_FOR_DEEPDRILLS: "10000000"
  MAX_SUBDIM_CARDINALITY: "1000"
  META_DATABASE: "chaosgenius"
  MIN_DATA_IN_SUBGROUP: "30"
  MULTIDIM_ANALYSIS_FOR_ANOMALY: "False"
  REACT_APP_EVENT_ALERT: "false"
  SECRET_KEY: "\"t8GIEp8hWmR8y6VLqd6qQCMXzjRaKsx8nRruWNtFuec=\""
  SEND_FILE_MAX_AGE_DEFAULT: "31556926"
  TIMEZONE: "UTC"
  TOP_DIMENSIONS_FOR_ANOMALY_DRILLDOWN: "10"
  TOP_SUBDIMENSIONS_FOR_ANOMALY: "10"
---
# Source: chaosgenius/templates/backend-worker-alerts/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-chaosgenius-worker-alerts
  namespace: default
  labels:
    helm.sh/chart: chaosgenius-0.1.0
    app.kubernetes.io/name: chaosgenius
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
data:
  API_URL: "/api/v1/"
  CACHE_DEFAULT_TIMEOUT: "1"
  CELERY_BROKER_URL: "redis://chaosgenius-redis-master:6379/1"
  CELERY_RESULT_BACKEND: "redis://chaosgenius-redis-master:6379/1"
  CG_DB_DOCKER_MOUNT: "cg_db"
  CHAOSGENIUS_VERSION_POSTFIX: "git"
  CHAOSGENIUS_WEBAPP_URL: "https://app.k8s.chaosgenius.io"
  CONFIG_ROOT: "/data"
  DATABASE_DB: "airbyte"
  DATABASE_HOST: "db"
  DATABASE_PASSWORD: "docker"
  DATABASE_PORT: "5432"
  DATABASE_URL: "jdbc:postgresql://db:5432/airbyte"
  DATABASE_USER: "docker"
  DATA_DOCKER_MOUNT: "airbyte_data"
  DAYS_OFFSET_FOR_ANALTYICS: "2"
  DB_DOCKER_MOUNT: "airbyte_db"
  DEEPDRILLS_ENABLED_TIME_RANGES: "last_30_days,last_7_days,previous_day,month_on_month,month_to_date,week_on_week,week_to_date"
  DEEPDRILLS_HTABLE_MAX_CHILDREN: "5"
  DEEPDRILLS_HTABLE_MAX_DEPTH: "3"
  DEEPDRILLS_HTABLE_MAX_PARENTS: "5"
  DOCKER_NETWORK: "chaos_genius_default"
  HACK_LOCAL_ROOT_PARENT: "/tmp"
  INTERNAL_API_HOST: "airbyte-server:8001"
  LOCAL_DOCKER_MOUNT: "/tmp/airbyte_local"
  LOCAL_ROOT: "/tmp/airbyte_local"
  LOG_LEVEL: "INFO"
  MAX_ANOMALY_SLACK_DAYS: "14"
  MAX_DEEPDRILLS_SLACK_DAYS: "14"
  MAX_FILTER_SUBGROUPS_ANOMALY: "250"
  MAX_ROWS_FOR_DEEPDRILLS: "10000000"
  MAX_SUBDIM_CARDINALITY: "1000"
  MAX_SYNC_JOB_ATTEMPTS: "3"
  MAX_SYNC_TIMEOUT_DAYS: "3"
  MIN_DATA_IN_SUBGROUP: "30"
  MULTIDIM_ANALYSIS_FOR_ANOMALY: "False"
  REACT_APP_DISABLE_TELEMETRY: "false"
  REACT_APP_EVENT_ALERT: "false"
  SOURCE_BING_ADS: "false"
  SOURCE_FACEBOOK_ADS: "false"
  SOURCE_GOOGLE_ADS: "false"
  SOURCE_GOOGLE_ANALYTICS: "true"
  SOURCE_GOOGLE_BIG_QUERY: "false"
  SOURCE_GOOGLE_SHEETS: "true"
  SOURCE_MYSQL: "false"
  SOURCE_POSTGRES: "false"
  SOURCE_SHOPIFY: "false"
  SOURCE_SNOWFLAKE: "false"
  SOURCE_STRIPE: "false"
  SUBMITTER_NUM_THREADS: "10"
  TASK_CHECKPOINT_LIMIT: "1000"
  TEMPORAL_HOST: "airbyte-temporal:7233"
  TIMEZONE: "UTC"
  TOP_DIMENSIONS_FOR_ANOMALY_DRILLDOWN: "10"
  TOP_SUBDIMENSIONS_FOR_ANOMALY: "10"
  TRACKING_STRATEGY: "segment"
  VERSION: "0.29.12-alpha"
  WEBAPP_URL: "https://app.k8s.chaosgenius.io"
  WORKER_ENVIRONMENT: "docker"
  WORKSPACE_DOCKER_MOUNT: "airbyte_workspace"
  WORKSPACE_ROOT: "/tmp/workspace"
---
# Source: chaosgenius/templates/backend-worker-analytics/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-chaosgenius-worker-analytics
  namespace: default
  labels:
    helm.sh/chart: chaosgenius-0.1.0
    app.kubernetes.io/name: chaosgenius
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
data:
  API_URL: "/api/v1/"
  CACHE_DEFAULT_TIMEOUT: "1"
  CELERY_BROKER_URL: "redis://chaosgenius-redis-master:6379/1"
  CELERY_RESULT_BACKEND: "redis://chaosgenius-redis-master:6379/1"
  CG_DB_DOCKER_MOUNT: "cg_db"
  CHAOSGENIUS_VERSION_POSTFIX: "git"
  CHAOSGENIUS_WEBAPP_URL: "https://app.k8s.chaosgenius.io"
  CONFIG_ROOT: "/data"
  DATABASE_DB: "airbyte"
  DATABASE_HOST: "db"
  DATABASE_PASSWORD: "docker"
  DATABASE_PORT: "5432"
  DATABASE_URL: "jdbc:postgresql://db:5432/airbyte"
  DATABASE_USER: "docker"
  DATA_DOCKER_MOUNT: "airbyte_data"
  DAYS_OFFSET_FOR_ANALTYICS: "2"
  DB_DOCKER_MOUNT: "airbyte_db"
  DEEPDRILLS_ENABLED_TIME_RANGES: "last_30_days,last_7_days,previous_day,month_on_month,month_to_date,week_on_week,week_to_date"
  DEEPDRILLS_HTABLE_MAX_CHILDREN: "5"
  DEEPDRILLS_HTABLE_MAX_DEPTH: "3"
  DEEPDRILLS_HTABLE_MAX_PARENTS: "5"
  DOCKER_NETWORK: "chaos_genius_default"
  HACK_LOCAL_ROOT_PARENT: "/tmp"
  INTERNAL_API_HOST: "airbyte-server:8001"
  LOCAL_DOCKER_MOUNT: "/tmp/airbyte_local"
  LOCAL_ROOT: "/tmp/airbyte_local"
  LOG_LEVEL: "INFO"
  MAX_ANOMALY_SLACK_DAYS: "14"
  MAX_DEEPDRILLS_SLACK_DAYS: "14"
  MAX_FILTER_SUBGROUPS_ANOMALY: "250"
  MAX_ROWS_FOR_DEEPDRILLS: "10000000"
  MAX_SUBDIM_CARDINALITY: "1000"
  MAX_SYNC_JOB_ATTEMPTS: "3"
  MAX_SYNC_TIMEOUT_DAYS: "3"
  MIN_DATA_IN_SUBGROUP: "30"
  MULTIDIM_ANALYSIS_FOR_ANOMALY: "False"
  REACT_APP_DISABLE_TELEMETRY: "false"
  REACT_APP_EVENT_ALERT: "false"
  SOURCE_BING_ADS: "false"
  SOURCE_FACEBOOK_ADS: "false"
  SOURCE_GOOGLE_ADS: "false"
  SOURCE_GOOGLE_ANALYTICS: "true"
  SOURCE_GOOGLE_BIG_QUERY: "false"
  SOURCE_GOOGLE_SHEETS: "true"
  SOURCE_MYSQL: "false"
  SOURCE_POSTGRES: "false"
  SOURCE_SHOPIFY: "false"
  SOURCE_SNOWFLAKE: "false"
  SOURCE_STRIPE: "false"
  SUBMITTER_NUM_THREADS: "10"
  TASK_CHECKPOINT_LIMIT: "1000"
  TEMPORAL_HOST: "airbyte-temporal:7233"
  TIMEZONE: "UTC"
  TOP_DIMENSIONS_FOR_ANOMALY_DRILLDOWN: "10"
  TOP_SUBDIMENSIONS_FOR_ANOMALY: "10"
  TRACKING_STRATEGY: "segment"
  VERSION: "0.29.12-alpha"
  WEBAPP_URL: "https://app.k8s.chaosgenius.io"
  WORKER_ENVIRONMENT: "docker"
  WORKSPACE_DOCKER_MOUNT: "airbyte_workspace"
  WORKSPACE_ROOT: "/tmp/workspace"
---
# Source: chaosgenius/templates/webapp/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-chaosgenius-webapp
  namespace: default
  labels:
    helm.sh/chart: chaosgenius-0.1.0
    app.kubernetes.io/name: chaosgenius-webapp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
data:
  REACT_APP_DISABLE_TELEMETRY: "false"
  REACT_APP_EVENT_ALERT: "true"
---
# Source: chaosgenius/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: chaosgenius-db-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.1.22
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: chaosgenius/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: chaosgenius-db
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.1.22
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: chaosgenius/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: chaosgenius-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.8.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
---
# Source: chaosgenius/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chaosgenius-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.8.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: master
---
# Source: chaosgenius/templates/backend-server/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-chaosgenius
  labels:
    helm.sh/chart: chaosgenius-0.1.0
    app.kubernetes.io/name: chaosgenius-server
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: chaosgenius-server
    app.kubernetes.io/instance: release-name
---
# Source: chaosgenius/templates/webapp/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-chaosgenius-webapp
  labels:
    helm.sh/chart: chaosgenius-0.1.0
    app.kubernetes.io/name: chaosgenius-webapp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: chaosgenius-webapp
    app.kubernetes.io/instance: release-name
---
# Source: chaosgenius/templates/backend-scheduler/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-chaosgenius-scheduler
  labels:
    helm.sh/chart: chaosgenius-0.1.0
    app.kubernetes.io/name: chaosgenius
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: chaosgenius
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chaosgenius
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-chaosgenius
      securityContext:
        {}
      containers:
        - name: chaosgenius
          securityContext:
            {}
          image: "chaosgenius/chaosgenius-server:0.4.0"
          command: ["celery"]
          args: ["-A", "run.celery", "beat", "--loglevel=DEBUG"]
          envFrom:
            - configMapRef:
                name: release-name-chaosgenius-scheduler
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 1200m
              memory: 2.5Gi
            requests:
              cpu: 600m
              memory: 1.5Gi
---
# Source: chaosgenius/templates/backend-server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-chaosgenius-server
  labels:
    helm.sh/chart: chaosgenius-0.1.0
    app.kubernetes.io/name: chaosgenius-server
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: chaosgenius-server
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chaosgenius-server
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-chaosgenius
      securityContext:
        {}
      containers:
        - name: chaosgenius
          securityContext:
            {}
          image: "chaosgenius/chaosgenius-server:0.4.0"
          command: ["sh"]
          args: ["setup/run-backend-docker.sh"]
          envFrom:
            - configMapRef:
                name: release-name-chaosgenius-server
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 1200m
              memory: 2.5Gi
            requests:
              cpu: 600m
              memory: 1.5Gi
---
# Source: chaosgenius/templates/backend-worker-alerts/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-chaosgenius-worker-alerts
  labels:
    helm.sh/chart: chaosgenius-0.1.0
    app.kubernetes.io/name: chaosgenius
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: chaosgenius
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chaosgenius
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-chaosgenius
      securityContext:
        {}
      containers:
        - name: chaosgenius
          securityContext:
            {}
          image: "chaosgenius/chaosgenius-server:0.4.0"
          command: ["celery"]
          args: ["-A", "run.celery worker", "--loglevel=INFO", "--concurrency=2", "-P", "processes", "-Q", "alerts"]
          envFrom:
            - configMapRef:
                name: release-name-chaosgenius-worker-alerts
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 1200m
              memory: 2.5Gi
            requests:
              cpu: 600m
              memory: 1.5Gi
---
# Source: chaosgenius/templates/backend-worker-analytics/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-chaosgenius-worker-analytics
  labels:
    helm.sh/chart: chaosgenius-0.1.0
    app.kubernetes.io/name: chaosgenius
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: chaosgenius
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chaosgenius
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-chaosgenius
      securityContext:
        {}
      containers:
        - name: chaosgenius
          securityContext:
            {}
          image: "chaosgenius/chaosgenius-server:0.4.0"
          command: ["celery"]
          args: ["-A", "run.celery worker", "--loglevel=INFO", "--concurrency=2", "-P", "processes", "-Q", "anomaly-rca"]
          envFrom:
            - configMapRef:
                name: release-name-chaosgenius-worker-analytics
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 1200m
              memory: 2.5Gi
            requests:
              cpu: 600m
              memory: 1.5Gi
---
# Source: chaosgenius/templates/webapp/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-chaosgenius-webapp
  labels:
    helm.sh/chart: chaosgenius-0.1.0
    app.kubernetes.io/name: chaosgenius-webapp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: chaosgenius-webapp
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chaosgenius-webapp
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-chaosgenius
      securityContext:
        {}
      containers:
        - name: chaosgenius
          securityContext:
            {}
          image: "chaosgenius/chaosgenius-webapp:0.4.0"
          command: ["sh"]
          args: ["-c", "npx react-inject-env set -d ./ && nginx -g 'daemon off;'"]
          envFrom:
            - configMapRef:
                name: release-name-chaosgenius-webapp
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 500m
              memory: 1.5Gi
            requests:
              cpu: 200m
              memory: 1Gi
---
# Source: chaosgenius/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: chaosgenius-db
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.1.22
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: chaosgenius-db-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: chaosgenius-db
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.1.22
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.2.0-debian-10-r70
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: chaosgenius-db
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: custom-init-scripts
          configMap:
            name: chaosgenius-db-init-scripts
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: chaosgenius/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: chaosgenius-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.8.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: master
  serviceName: chaosgenius-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-16.8.7
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 3bad67afc0b62b0f0fb05ed174b0ce33bee756e0dc25b3d64b9fd173b64cc381
        checksum/health: 340cb8c273e5cf06efbfa597e3d2faf08d8a9c43bdfc301296cbe7800b03ef24
        checksum/scripts: 83743c337cdbcbf09cdf5a5ae6c41335f8be6ca8100287f9860ffd49016dd997
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: chaosgenius-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: master
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.6-debian-10-r192
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: chaosgenius-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: chaosgenius-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: chaosgenius-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: chaosgenius/templates/backend-server/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-chaosgenius-server
  namespace: default
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    external-dns.alpha.kubernetes.io/hostname: app.k8s.chaosgenius.io
    kubernetes.io/ingress.class: nginx
  labels:
    app: chaosgenius-backend
    helm.sh/chart: chaosgenius-0.1.0
    app.kubernetes.io/name: chaosgenius
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: app.k8s.chaosgenius.io
      http:
        paths:
          - path: /api
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-chaosgenius-server
                port:
                  number: 5000
  tls:
    - hosts:
      - app.k8s.chaosgenius.io
      secretName: k8s-cg-tls
---
# Source: chaosgenius/templates/webapp/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-chaosgenius-webapp
  namespace: default
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    external-dns.alpha.kubernetes.io/hostname: app.k8s.chaosgenius.io
    kubernetes.io/ingress.class: nginx
  labels:
    app: chaosgenius-backend
    helm.sh/chart: chaosgenius-0.1.0
    app.kubernetes.io/name: chaosgenius
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: app.k8s.chaosgenius.io
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-chaosgenius-webapp
                port:
                  number: 8080
  tls:
    - hosts:
      - app.k8s.chaosgenius.io
      secretName: k8s-cg-tls
---
# Source: chaosgenius/templates/backend-worker-alerts/scaledobject.yaml
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: release-name-chaosgenius-worker-alerts-scaler
  labels:
    deploymentName: release-name-chaosgenius-worker-alerts
spec:
  scaleTargetRef:
    name: release-name-chaosgenius-worker-alerts
  pollingInterval: 5
  cooldownPeriod: 120 # 2 min
  idleReplicaCount: 0 # when after polling redis list is found empty replica will be set to this count
  minReplicaCount: 1 # min replicas to scale up to when first trigger (appearance of a msg on redis list) occurs , also the number to scale down to when under thresold and not idle, idle means 0 msg 
  maxReplicaCount: 30 # max replicas will scale up to
  triggers:
    - type: redis
      metadata:
        listName: alerts
        listLength: "10"
        databaseIndex: "1"
        address: chaosgenius-redis-master:6379
        # addressFromEnv: REDIS_ADDRESS
---
# Source: chaosgenius/templates/backend-worker-analytics/scaledobject.yaml
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: release-name-chaosgenius-worker-analytics-scaler
  labels:
    deploymentName: release-name-chaosgenius-worker-analytics
spec:
  scaleTargetRef:
    name: release-name-chaosgenius-worker-analytics
  pollingInterval: 5
  cooldownPeriod: 120 # 2 min
  idleReplicaCount: 0 # when after polling redis list is found empty replica will be set to this count
  minReplicaCount: 1 # min replicas to scale up to when first trigger (appearance of a msg on redis list) occurs , also the number to scale down to when under thresold and not idle, idle means 0 msg 
  maxReplicaCount: 30 # max replicas will scale up to
  triggers:
    - type: redis
      metadata:
        listName: anomaly-rca
        listLength: "10"
        databaseIndex: "1"
        address: chaosgenius-redis-master:6379
        # addressFromEnv: REDIS_ADDRESS
